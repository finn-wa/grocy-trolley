/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

import { StoreBrand, UserObjectReference } from "..";
import { GrocyBoolean } from "../types/grocy-types";

export interface paths {
  "/system/info": {
    get: {
      responses: {
        /** An DbChangedTimeResponse object */
        "200": {
          content: {
            "application/json": {
              grocy_version?: {
                Version?: string;
                /** Format: date */
                ReleaseDate?: string;
              };
              php_version?: string;
              sqlite_version?: string;
            };
          };
        };
      };
    };
  };
  "/system/db-changed-time": {
    get: {
      responses: {
        /** An DbChangedTimeResponse object */
        "200": {
          content: {
            "application/json": components["schemas"]["DbChangedTimeResponse"];
          };
        };
      };
    };
  };
  "/system/config": {
    get: {
      responses: {
        /** Key/value pairs of config settings */
        "200": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/system/time": {
    get: {
      parameters: {
        query: {
          /** Offset of timestamp in seconds. Can be positive or negative. */
          offset?: components["parameters"]["offsettime"];
        };
      };
      responses: {
        /** A TimeResponse object */
        "200": {
          content: {
            "application/json": components["schemas"]["TimeResponse"];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/system/localization-strings": {
    get: {
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
  };
  "/system/log-missing-localization": {
    /** Only when MODE == 'dev', so should only be called then */
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      /** A valid MissingLocalizationRequest object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["MissingLocalizationRequest"];
        };
      };
    };
  };
  "/objects/{entity}": {
    get: {
      parameters: {
        path: {
          /** A valid entity name */
          entity: components["schemas"]["ExposedEntity_NotIncludingNotListable"];
        };
        query: {
          /** An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
          "query[]"?: components["parameters"]["query"];
          /** A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
          order?: components["parameters"]["order"];
          /** The maximum number of objects to return */
          limit?: components["parameters"]["limit"];
          /** The number of objects to skip */
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        /** An entity object */
        "200": {
          content: {
            "application/json": (
              | components["schemas"]["Product"]
              | components["schemas"]["Chore"]
              | components["schemas"]["Battery"]
              | components["schemas"]["Location"]
              | components["schemas"]["QuantityUnit"]
              | components["schemas"]["ShoppingListItem"]
              | components["schemas"]["StockEntry"]
              | components["schemas"]["ProductBarcode"]
            )[];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
        /** The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
        "500": {
          content: {
            "application/json": components["schemas"]["Error500"];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** A valid entity name */
          entity: components["schemas"]["ExposedEntity_NotIncludingNotEditable"];
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": {
              /** @description The id of the created object */
              created_object_id?: number;
            };
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      /** A valid entity object of the entity specified in parameter *entity* */
      requestBody: {
        content: {
          "application/json":
            | components["schemas"]["Product"]
            | components["schemas"]["Chore"]
            | components["schemas"]["Battery"]
            | components["schemas"]["Location"]
            | components["schemas"]["QuantityUnit"]
            | components["schemas"]["ShoppingListItem"]
            | components["schemas"]["StockEntry"]
            | components["schemas"]["ProductBarcode"];
        };
      };
    };
  };
  "/objects/{entity}/{objectId}": {
    get: {
      parameters: {
        path: {
          /** A valid entity name */
          entity: components["schemas"]["ExposedEntity_NotIncludingNotListable"];
          /** A valid object id of the given entity */
          objectId: number;
        };
      };
      responses: {
        /** An entity object */
        "200": {
          content: {
            "application/json":
              | components["schemas"]["Product"]
              | components["schemas"]["Chore"]
              | components["schemas"]["Battery"]
              | components["schemas"]["Location"]
              | components["schemas"]["QuantityUnit"]
              | components["schemas"]["ShoppingListItem"]
              | components["schemas"]["StockEntry"]
              | components["schemas"]["ProductBarcode"];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
        /** Object not found */
        "404": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** A valid entity name */
          entity: components["schemas"]["ExposedEntity_NotIncludingNotEditable"];
          /** A valid object id of the given entity */
          objectId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      /** A valid entity object of the entity specified in parameter *entity* */
      requestBody: {
        content: {
          "application/json":
            | components["schemas"]["Product"]
            | components["schemas"]["Chore"]
            | components["schemas"]["Battery"]
            | components["schemas"]["Location"]
            | components["schemas"]["QuantityUnit"]
            | components["schemas"]["ShoppingListItem"]
            | components["schemas"]["StockEntry"]
            | components["schemas"]["ProductBarcode"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** A valid entity name */
          entity: components["schemas"]["ExposedEntity_NotIncludingNotDeletable"];
          /** A valid object id of the given entity */
          objectId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/userfields/{entity}/{objectId}": {
    get: {
      parameters: {
        path: {
          /** A valid entity name */
          entity: components["schemas"]["ExposedEntity"];
          /** A valid object id of the given entity */
          objectId: number;
        };
      };
      responses: {
        /** Key/value pairs of userfields */
        "200": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** A valid entity name */
          entity: components["schemas"]["ExposedEntity_NotIncludingNotEditable"];
          /** A valid object id of the given entity */
          objectId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      /** A valid entity object of the entity specified in parameter *entity* */
      requestBody: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  "/files/{group}/{fileName}": {
    /** With proper Content-Type header */
    get: {
      parameters: {
        path: {
          /** The file group */
          group: components["schemas"]["FileGroups"];
          /** The file name (including extension)<br>**BASE64 encoded** */
          fileName: string;
        };
        query: {
          /** Force the file to be served as the given type */
          force_serve_as?: "picture";
          /** Only when using `force_serve_as` = `picture`: Downscale the picture to the given height while maintaining the aspect ratio */
          best_fit_height?: number;
          /** Only when using `force_serve_as` = `picture`: Downscale the picture to the given width while maintaining the aspect ratio */
          best_fit_width?: number;
        };
      };
      responses: {
        /** The binary file contents (Content-Type header is automatically set based on the file type) */
        "200": {
          content: {
            "application/octet-stream": string;
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
    /** The file will be stored at /data/storage/{group}/{file_name} (you need to remember the group and file name to get or delete it again) */
    put: {
      parameters: {
        path: {
          /** The file group */
          group: components["schemas"]["FileGroups"];
          /** The file name (including extension)<br>**BASE64 encoded** */
          fileName: string;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/octet-stream": string;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** The file group */
          group: components["schemas"]["FileGroups"];
          /** The file name (including extension)<br>**BASE64 encoded** */
          fileName: string;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          /** An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
          "query[]"?: components["parameters"]["query"];
          /** A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
          order?: components["parameters"]["order"];
          /** The maximum number of objects to return */
          limit?: components["parameters"]["limit"];
          /** The number of objects to skip */
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        /** A list of user objects */
        "200": {
          content: {
            "application/json": components["schemas"]["UserDto"][];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
        /** The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
        "500": {
          content: {
            "application/json": components["schemas"]["Error500"];
          };
        };
      };
    };
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      /** A valid user object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  "/users/{userId}": {
    put: {
      parameters: {
        path: {
          /** A valid user id */
          userId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      /** A valid user object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** A valid user id */
          userId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/users/{userId}/permissions": {
    get: {
      parameters: {
        path: {
          /** A valid user id */
          userId: number;
        };
      };
      responses: {
        /** A list of user permission objects */
        "200": {
          content: {
            "application/json": {
              permission_id?: number;
              user_id?: number;
            }[];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** A valid user id */
          userId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description A list of permission ids */
            permissions?: number[];
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** A valid user id */
          userId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description A permission ids */
            permissions_id?: number;
          };
        };
      };
    };
  };
  "/user": {
    get: {
      responses: {
        /** A user object */
        "200": {
          content: {
            "application/json": components["schemas"]["UserDto"][];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/user/settings": {
    get: {
      responses: {
        /** Key/value pairs of user settings */
        "200": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/user/settings/{settingKey}": {
    get: {
      parameters: {
        path: {
          /** The key of the user setting */
          settingKey: string;
        };
      };
      responses: {
        /** A UserSetting object */
        "200": {
          content: {
            "application/json": components["schemas"]["UserSetting"];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** The key of the user setting */
          settingKey: string;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      /** A valid UserSetting object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserSetting"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** The key of the user setting */
          settingKey: string;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock": {
    get: {
      responses: {
        /** An array of CurrentStockResponse objects */
        "200": {
          content: {
            "application/json": components["schemas"]["CurrentStockResponse"][];
          };
        };
      };
    };
  };
  "/stock/entry/{entryId}": {
    get: {
      parameters: {
        path: {
          /** A valid stock entry id */
          entryId: number;
        };
      };
      responses: {
        /** A StockEntry Response object */
        "200": {
          content: {
            "application/json": components["schemas"]["StockEntry"];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** A valid stock entry id */
          entryId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, invalid transaction type) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            amount?: number;
            /**
             * Format: date
             * @description The due date of the product to add, when omitted, the current date is used
             */
            best_before_date?: string;
            /** @description The price per stock quantity unit in configured currency */
            price?: number;
            /** @description If the stock entry was already opened or not */
            open?: boolean;
            /** @description If omitted, the default location of the product is used */
            location_id?: number;
            /** @description If omitted, no store will be affected */
            shopping_location_id?: number;
            /**
             * Format: date
             * @description The date when this stock entry was purchased
             */
            purchased_date?: string;
          };
        };
      };
    };
  };
  "/stock/entry/{entryId}/printlabel": {
    get: {
      parameters: {
        path: {
          /** A valid stock entry id */
          entryId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        /** The operation was not successful (possible errors are: Not existing stock entry, error on WebHook execution) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/volatile": {
    get: {
      parameters: {
        query: {
          /** The number of days in which products are considered to be due soon */
          due_soon_days?: number;
        };
      };
      responses: {
        /** A CurrentVolatilStockResponse object */
        "200": {
          content: {
            "application/json": components["schemas"]["CurrentVolatilStockResponse"][];
          };
        };
      };
    };
  };
  "/stock/products/{productId}": {
    get: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
      };
      responses: {
        /** A ProductDetailsResponse object */
        "200": {
          content: {
            "application/json": components["schemas"]["ProductDetailsResponse"];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/products/{productId}/locations": {
    get: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
        query: {
          /** If sub product locations should be included (if the given product is a parent product and in addition to the ones of the given product) */
          include_sub_products?: boolean;
          /** An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
          "query[]"?: components["parameters"]["query"];
          /** A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
          order?: components["parameters"]["order"];
          /** The maximum number of objects to return */
          limit?: components["parameters"]["limit"];
          /** The number of objects to skip */
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        /** An array of StockLocation objects */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLocation"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
        /** The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
        "500": {
          content: {
            "application/json": components["schemas"]["Error500"];
          };
        };
      };
    };
  };
  "/stock/products/{productId}/entries": {
    get: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
        query: {
          /** If sub products should be included (if the given product is a parent product and in addition to the ones of the given product) */
          include_sub_products?: boolean;
          /** An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
          "query[]"?: components["parameters"]["query"];
          /** A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
          order?: components["parameters"]["order"];
          /** The maximum number of objects to return */
          limit?: components["parameters"]["limit"];
          /** The number of objects to skip */
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        /** An array of StockEntry objects */
        "200": {
          content: {
            "application/json": components["schemas"]["StockEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
        /** The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
        "500": {
          content: {
            "application/json": components["schemas"]["Error500"];
          };
        };
      };
    };
  };
  "/stock/products/{productId}/price-history": {
    get: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
      };
      responses: {
        /** An array of ProductPriceHistory objects */
        "200": {
          content: {
            "application/json": components["schemas"]["ProductPriceHistory"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/products/{productId}/add": {
    post: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, invalid transaction type) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            amount?: number;
            /**
             * Format: date
             * @description The due date of the product to add, when omitted, the current date is used
             */
            best_before_date?: string;
            transaction_type?: components["schemas"]["StockTransactionType"];
            /** @description The price per stock quantity unit in configured currency */
            price?: number;
            /** @description If omitted, the default location of the product is used */
            location_id?: number;
            /** @description If omitted, no store will be affected */
            shopping_location_id?: number;
            /** @description `1` = No label, `2` = Single label, `3` = Label per unit */
            stock_label_type?: number;
          };
        };
      };
    };
  };
  "/stock/products/{productId}/consume": {
    post: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, invalid transaction type, given amount > current stock amount) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to remove - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            amount?: number;
            transaction_type?: components["schemas"]["StockTransactionType"];
            /** @description True when the given product was spoiled, defaults to false */
            spoiled?: boolean;
            /** @description A specific stock entry id to consume, if used, the amount has to be 1 */
            stock_entry_id?: string;
            /** @description A valid recipe id for which this product was used (for statistical purposes only) */
            recipe_id?: number;
            /** @description A valid location id (if supplied, only stock at the given location is considered, if ommitted, stock of any location is considered) */
            location_id?: number;
            /** @description For tare weight handling enabled products, `true` when the given is the absolute amount to be consumed, not the amount including the container weight */
            exact_amount?: boolean;
            /** @description `True` when any in-stock sub product should be used when the given product is a parent product and currently not in-stock */
            allow_subproduct_substitution?: boolean;
          };
        };
      };
    };
  };
  "/stock/products/{productId}/transfer": {
    post: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, no existing from or to location, given amount > current stock amount at the source location) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to transfer - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            amount?: number;
            /** @description A valid location id, the location from where the product should be transfered */
            location_id_from?: number;
            /** @description A valid location id, the location to where the product should be transfered */
            location_id_to?: number;
            /** @description A specific stock entry id to transfer, if used, the amount has to be 1 */
            stock_entry_id?: string;
          };
        };
      };
    };
  };
  "/stock/products/{productId}/inventory": {
    post: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The new current amount for the given product - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            new_amount?: number;
            /**
             * Format: date
             * @description The due date which applies to added products
             */
            best_before_date?: string;
            /** @description If omitted, no store will be affected */
            shopping_location_id?: number;
            /** @description If omitted, the default location of the product is used (only applies to added products) */
            location_id?: number;
            /** @description If omitted, the last price of the product is used (only applies to added products) */
            price?: number;
            /** @description `1` = No label, `2` = Single label, `3` = Label per unit (only applies to added products) */
            stock_label_type?: number;
          };
        };
      };
    };
  };
  "/stock/products/{productId}/open": {
    post: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, given amount > current unopened stock amount) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to mark as opened */
            amount?: number;
            /** @description A specific stock entry id to open, if used, the amount has to be 1 */
            stock_entry_id?: string;
            /** @description `True` when any in-stock sub product should be used when the given product is a parent product and currently not in-stock */
            allow_subproduct_substitution?: boolean;
          };
        };
      };
    };
  };
  "/stock/products/{productId}/printlabel": {
    get: {
      parameters: {
        path: {
          /** A valid product id */
          productId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, error on WebHook execution) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/products/{productIdToKeep}/merge/{productIdToRemove}": {
    post: {
      parameters: {
        path: {
          /** A valid product id of the product to keep */
          productIdToKeep: number;
          /** A valid product id of the product to remove */
          productIdToRemove: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Invalid product id) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/products/by-barcode/{barcode}": {
    get: {
      parameters: {
        path: {
          /** Barcode */
          barcode: string;
        };
      };
      responses: {
        /** A ProductDetailsResponse object */
        "200": {
          content: {
            "application/json": components["schemas"]["ProductDetailsResponse"];
          };
        };
        /** The operation was not successful (possible errors are: Unknown barcode) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/products/by-barcode/{barcode}/add": {
    post: {
      parameters: {
        path: {
          /** Barcode */
          barcode: string;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, invalid transaction type) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            amount?: number;
            /**
             * Format: date
             * @description The due date of the product to add, when omitted, the current date is used
             */
            best_before_date?: string;
            transaction_type?: components["schemas"]["StockTransactionType"];
            /** @description The price per stock quantity unit in configured currency */
            price?: number;
            /** @description If omitted, the default location of the product is used */
            location_id?: number;
          };
        };
      };
    };
  };
  "/stock/products/by-barcode/{barcode}/consume": {
    post: {
      parameters: {
        path: {
          /** Barcode */
          barcode: string;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, invalid transaction type, given amount > current stock amount) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to remove - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            amount?: number;
            transaction_type?: components["schemas"]["StockTransactionType"];
            /** @description True when the given product was spoiled, defaults to false */
            spoiled?: boolean;
            /** @description A specific stock entry id to consume, if used, the amount has to be 1 */
            stock_entry_id?: string;
            /** @description A valid recipe id for which this product was used (for statistical purposes only) */
            recipe_id?: number;
            /** @description A valid location id (if supplied, only stock at the given location is considered, if ommitted, stock of any location is considered) */
            location_id?: number;
            /** @description For tare weight handling enabled products, `true` when the given is the absolute amount to be consumed, not the amount including the container weight */
            exact_amount?: boolean;
            /** @description `True` when any in-stock sub product should be used when the given product is a parent product and currently not in-stock */
            allow_subproduct_substitution?: boolean;
          };
        };
      };
    };
  };
  "/stock/products/by-barcode/{barcode}/transfer": {
    post: {
      parameters: {
        path: {
          /** Barcode */
          barcode: string;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, no existing from or to location, given amount > current stock amount at the source location) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to transfer - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            amount?: number;
            /** @description A valid location id, the location from where the product should be transfered */
            location_id_from?: number;
            /** @description A valid location id, the location to where the product should be transfered */
            location_id_to?: number;
            /** @description A specific stock entry id to transfer, if used, the amount has to be 1 */
            stock_entry_id?: string;
          };
        };
      };
    };
  };
  "/stock/products/by-barcode/{barcode}/inventory": {
    post: {
      parameters: {
        path: {
          /** Barcode */
          barcode: string;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The new current amount for the given product - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight */
            new_amount?: number;
            /**
             * Format: date
             * @description The due date which applies to added products
             */
            best_before_date?: string;
            /** @description If omitted, the default location of the product is used (only applies to added products) */
            location_id?: number;
            /** @description If omitted, the last price of the product is used (only applies to added products) */
            price?: number;
          };
        };
      };
    };
  };
  "/stock/products/by-barcode/{barcode}/open": {
    post: {
      parameters: {
        path: {
          /** Barcode */
          barcode: string;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing product, given amount > current unopened stock amount) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The amount to mark as opened */
            amount?: number;
            /** @description A specific stock entry id to open, if used, the amount has to be 1 */
            stock_entry_id?: string;
            /** @description `True` when any in-stock sub product should be used when the given product is a parent product and currently not in-stock */
            allow_subproduct_substitution?: boolean;
          };
        };
      };
    };
  };
  "/stock/shoppinglist/add-missing-products": {
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing shopping list) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The shopping list to use, when omitted, the default shopping list (with id 1) is used */
            list_id?: number;
          };
        };
      };
    };
  };
  "/stock/shoppinglist/add-overdue-products": {
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing shopping list) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The shopping list to use, when omitted, the default shopping list (with id 1) is used */
            list_id?: number;
          };
        };
      };
    };
  };
  "/stock/shoppinglist/add-expired-products": {
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing shopping list) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The shopping list to use, when omitted, the default shopping list (with id 1) is used */
            list_id?: number;
          };
        };
      };
    };
  };
  "/stock/shoppinglist/clear": {
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing shopping list) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The shopping list id to clear, when omitted, the default shopping list (with id 1) is used */
            list_id?: number;
            /** @description When `true`, only done items will be removed (defaults to `false` when ommited) */
            done_only?: boolean;
          };
        };
      };
    };
  };
  "/stock/shoppinglist/add-product": {
    /** If the product is already on the shopping list, the given amount will increase the amount of the already existing item, otherwise a new item will be added */
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing shopping list, Invalid product id supplied) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description A valid product id of the product to be added */
            product_id?: number;
            /** @description A valid quantity unit id (used only for display; the amount needs to be related to the products stock QU), when omitted, the products stock QU is used */
            qu_id?: number;
            /** @description A valid shopping list id, when omitted, the default shopping list (with id 1) is used */
            list_id?: number;
            /** @description The amount (related to the products stock QU) to add, when omitted, the default amount of 1 is used */
            product_amount?: number;
            /** @description The note of the shopping list item */
            note?: string;
          };
        };
      };
    };
  };
  "/stock/shoppinglist/remove-product": {
    /** If the resulting amount is <= 0, the item will be completely removed from the given list, otherwise the given amount will reduce the amount of the existing item */
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing shopping list, Invalid product id supplied) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description A valid product id of the item on the shopping list */
            product_id?: number;
            /** @description A valid shopping list id, when omitted, the default shopping list (with id 1) is used */
            list_id?: number;
            /** @description The amount of product units to remove, when omitted, the default amount of 1 is used */
            product_amount?: number;
          };
        };
      };
    };
  };
  "/stock/bookings/{bookingId}": {
    get: {
      parameters: {
        path: {
          /** A valid stock booking id */
          bookingId: number;
        };
      };
      responses: {
        /** A StockLogEntry object */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"];
          };
        };
        /** The operation was not successful (possible errors are: Invalid stock booking id) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/bookings/{bookingId}/undo": {
    post: {
      parameters: {
        path: {
          /** A valid stock booking id */
          bookingId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing booking) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/transactions/{transactionId}": {
    get: {
      parameters: {
        path: {
          /** A valid stock transaction id */
          transactionId: string;
        };
      };
      responses: {
        /** An array of StockLogEntry objects */
        "200": {
          content: {
            "application/json": components["schemas"]["StockLogEntry"][];
          };
        };
        /** The operation was not successful (possible errors are: Not existing transaction) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/transactions/{transactionId}/undo": {
    post: {
      parameters: {
        path: {
          /** A valid stock transaction id */
          transactionId: string;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing transaction) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/stock/barcodes/external-lookup/{barcode}": {
    get: {
      parameters: {
        path: {
          /** The barcode to lookup up */
          barcode: string;
        };
        query: {
          /** When true, the product is added to the database on a successful lookup and the new product id is in included in the response */
          add?: boolean;
        };
      };
      responses: {
        /** An ExternalBarcodeLookupResponse object or null, when nothing was found for the given barcode */
        "200": {
          content: {
            "application/json": components["schemas"]["ExternalBarcodeLookupResponse"];
          };
        };
        /** The operation was not successful (possible errors are: Plugin error) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/recipes/{recipeId}/add-not-fulfilled-products-to-shoppinglist": {
    post: {
      parameters: {
        path: {
          /** A valid recipe id */
          recipeId: string;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description An optional array of product ids to exclude them from being put on the shopping list */
            excludedProductIds?: number[];
          };
        };
      };
    };
  };
  "/recipes/{recipeId}/fulfillment": {
    get: {
      parameters: {
        path: {
          /** A valid recipe id */
          recipeId: string;
        };
      };
      responses: {
        /** A RecipeFulfillmentResponse object */
        "200": {
          content: {
            "application/json": components["schemas"]["RecipeFulfillmentResponse"];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/recipes/{recipeId}/consume": {
    post: {
      parameters: {
        path: {
          /** A valid recipe id */
          recipeId: string;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
      };
    };
  };
  "/recipes/fulfillment": {
    get: {
      parameters: {
        query: {
          /** An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
          "query[]"?: components["parameters"]["query"];
          /** A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
          order?: components["parameters"]["order"];
          /** The maximum number of objects to return */
          limit?: components["parameters"]["limit"];
          /** The number of objects to skip */
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        /** An array of RecipeFulfillmentResponse objects */
        "200": {
          content: {
            "application/json": components["schemas"]["RecipeFulfillmentResponse"][];
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
        /** The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
        "500": {
          content: {
            "application/json": components["schemas"]["Error500"];
          };
        };
      };
    };
  };
  "/recipes/{recipeId}/copy": {
    post: {
      parameters: {
        path: {
          /** A valid recipe id of the recipe to copy */
          recipeId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": {
              /** @description The id of the created recipe */
              created_object_id?: number;
            };
          };
        };
        /** The operation was not successful (possible errors are: Invalid recipe id) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/chores": {
    get: {
      parameters: {
        query: {
          /** An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
          "query[]"?: components["parameters"]["query"];
          /** A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
          order?: components["parameters"]["order"];
          /** The maximum number of objects to return */
          limit?: components["parameters"]["limit"];
          /** The number of objects to skip */
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        /** An array of CurrentChoreResponse objects */
        "200": {
          content: {
            "application/json": components["schemas"]["CurrentChoreResponse"][];
          };
        };
        /** The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
        "500": {
          content: {
            "application/json": components["schemas"]["Error500"];
          };
        };
      };
    };
  };
  "/chores/{choreId}": {
    get: {
      parameters: {
        path: {
          /** A valid chore id */
          choreId: number;
        };
      };
      responses: {
        /** A ChoreDetailsResponse object */
        "200": {
          content: {
            "application/json": components["schemas"]["ChoreDetailsResponse"];
          };
        };
        /** The operation was not successful (possible errors are: Not existing chore) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/chores/{choreId}/execute": {
    post: {
      parameters: {
        path: {
          /** A valid chore id */
          choreId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["ChoreLogEntry"];
          };
        };
        /** The operation was not successful (possible errors are: Not existing chore) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: date-time
             * @description The time of when the chore was executed, when omitted, the current time is used
             */
            tracked_time?: string;
            /** @description A valid user id of who executed this chore, when omitted, the currently authenticated user will be used */
            done_by?: number;
          };
        };
      };
    };
  };
  "/chores/executions/{executionId}/undo": {
    post: {
      parameters: {
        path: {
          /** A valid chore execution id */
          executionId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing booking) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/chores/executions/calculate-next-assignments": {
    post: {
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The chore id of the chore which next user assignment should be (re)calculated, when omitted, the next user assignments of all chores will (re)caluclated */
            chore_id?: number;
          };
        };
      };
    };
  };
  "/chores/{choreId}/printlabel": {
    get: {
      parameters: {
        path: {
          /** A valid chore id */
          choreId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        /** The operation was not successful (possible errors are: Not existing chore, error on WebHook execution) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/chores/{choreIdToKeep}/merge/{choreIdToRemove}": {
    post: {
      parameters: {
        path: {
          /** A valid chore id of the chore to keep */
          choreIdToKeep: number;
          /** A valid chore id of the chore to remove */
          choreIdToRemove: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Invalid chore id) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/batteries": {
    get: {
      parameters: {
        query: {
          /** An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
          "query[]"?: components["parameters"]["query"];
          /** A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
          order?: components["parameters"]["order"];
          /** The maximum number of objects to return */
          limit?: components["parameters"]["limit"];
          /** The number of objects to skip */
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        /** An array of CurrentBatteryResponse objects */
        "200": {
          content: {
            "application/json": components["schemas"]["CurrentBatteryResponse"][];
          };
        };
        /** The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
        "500": {
          content: {
            "application/json": components["schemas"]["Error500"];
          };
        };
      };
    };
  };
  "/batteries/{batteryId}": {
    get: {
      parameters: {
        path: {
          /** A valid battery id */
          batteryId: number;
        };
      };
      responses: {
        /** A BatteryDetailsResponse object */
        "200": {
          content: {
            "application/json": components["schemas"]["BatteryDetailsResponse"];
          };
        };
        /** The operation was not successful (possible errors are: Not existing battery) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/batteries/{batteryId}/charge": {
    post: {
      parameters: {
        path: {
          /** A valid battery id */
          batteryId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": components["schemas"]["BatteryChargeCycleEntry"];
          };
        };
        /** The operation was not successful (possible errors are: Not existing battery) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: date-time
             * @description The time of when the battery was charged, when omitted, the current time is used
             */
            tracked_time?: string;
          };
        };
      };
    };
  };
  "/batteries/charge-cycles/{chargeCycleId}/undo": {
    post: {
      parameters: {
        path: {
          /** A valid charge cycle id */
          chargeCycleId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing booking) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/batteries/{batteryId}/printlabel": {
    get: {
      parameters: {
        path: {
          /** A valid battery id */
          batteryId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "200": {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        /** The operation was not successful (possible errors are: Not existing battery, error on WebHook execution) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/tasks": {
    get: {
      parameters: {
        query: {
          /** An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
          "query[]"?: components["parameters"]["query"];
          /** A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
          order?: components["parameters"]["order"];
          /** The maximum number of objects to return */
          limit?: components["parameters"]["limit"];
          /** The number of objects to skip */
          offset?: components["parameters"]["offset"];
        };
      };
      responses: {
        /** An array of CurrentTaskResponse objects */
        "200": {
          content: {
            "application/json": components["schemas"]["CurrentTaskResponse"][];
          };
        };
        /** The operation was not successful (possible errors are invalid field names or conditions in filter parameters provided) */
        "500": {
          content: {
            "application/json": components["schemas"]["Error500"];
          };
        };
      };
    };
  };
  "/tasks/{taskId}/complete": {
    post: {
      parameters: {
        path: {
          /** A valid task id */
          taskId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing task) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: date-time
             * @description The time of when the task was completed, when omitted, the current time is used
             */
            done_time?: string;
          };
        };
      };
    };
  };
  "/tasks/{taskId}/undo": {
    post: {
      parameters: {
        path: {
          /** A valid task id */
          taskId: number;
        };
      };
      responses: {
        /** The operation was successful */
        "204": never;
        /** The operation was not successful (possible errors are: Not existing task) */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/calendar/ical": {
    get: {
      responses: {
        /** The iCal file contents */
        "200": {
          content: {
            "text/calendar": string;
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
  "/calendar/ical/sharing-link": {
    get: {
      responses: {
        /** The (public) sharing link for the calendar in iCal format */
        "200": {
          content: {
            "application/json": {
              url?: string;
            };
          };
        };
      };
    };
  };
  "/print/shoppinglist/thermal": {
    get: {
      parameters: {
        query: {
          /** Shopping list id */
          list?: number;
          /** Prints grocy logo if true */
          printHeader?: boolean;
        };
      };
      responses: {
        /** Returns OK if the printing was successful */
        "200": {
          content: {
            "application/json": {
              result?: string;
            };
          };
        };
        /** The operation was not successful */
        "400": {
          content: {
            "application/json": components["schemas"]["Error400"];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    UserObjectReference: UserObjectReference;
    /** @example [object Object] */
    Product: {
      id: number;
      name?: string;
      description: string;
      location_id?: number;
      qu_id_purchase?: number;
      qu_id_stock?: number;
      enable_tare_weight_handling?: number;
      not_check_stock_fulfillment_for_recipes?: number;
      product_group_id?: number;
      qu_factor_purchase_to_stock?: number;
      tare_weight?: number;
      /** @description Can contain multiple barcodes separated by comma */
      barcode?: string;
      min_stock_amount?: number;
      default_best_before_days?: number;
      default_best_before_days_after_open?: number;
      picture_file_name?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
      shopping_location_id?: number;
      /** @description Key/value pairs of userfields */
      userfields: {
        isParent?: GrocyBoolean;
        storeMetadata?: string;
      };
    };
    /** @example [object Object] */
    QuantityUnit: {
      id?: number;
      name?: string;
      name_plural?: string;
      description?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
      plural_forms?: string;
      /** @description Key/value pairs of userfields */
      userfields?: { [key: string]: unknown };
    };
    QuantityUnitConversion: {
      product_id: string | number;
      from_qu_id: string | number;
      to_qu_id: string | number;
      factor: number;
    };
    /** @example [object Object] */
    Location: {
      id?: number;
      name?: string;
      description?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
      /** @description Key/value pairs of userfields */
      userfields?: { [key: string]: unknown };
    };
    /** @example [object Object] */
    ShoppingLocation: {
      id: number;
      name: string;
      description: string;
      /** Format: date-time */
      row_created_timestamp?: string;
      /** @description Key/value pairs of userfields */
      userfields: {
        brand: StoreBrand;
        storeId: string;
      };
    };
    /** @example [object Object] */
    StockLocation: {
      id?: number;
      product_id?: number;
      amount?: number;
      location_id?: number;
      location_name?: string;
      location_is_freezer?: number;
    };
    /** @example [object Object] */
    StockEntry: {
      id?: number;
      product_id?: number;
      location_id?: number;
      shopping_location_id?: number;
      amount?: number;
      /** Format: date */
      best_before_date?: string;
      /** Format: date */
      purchased_date?: string;
      /** @description A unique id which references this stock entry during its lifetime */
      stock_id?: string;
      price?: number;
      open?: number;
      /** Format: date */
      opened_date?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    /** @example [object Object] */
    RecipeFulfillmentResponse: {
      recipe_id?: number;
      need_fulfilled?: boolean;
      need_fulfilled_with_shopping_list?: boolean;
      missing_products_count?: number;
      costs?: number;
    };
    ProductGroup: {
      /** ID is a number in a string */
      id: string;
      name: string;
      description: string;
      /** Format: "2022-01-15 14:11:19" */
      row_created_timestamp: string;
    };
    /** @example [object Object] */
    ProductDetailsResponse: {
      product?: components["schemas"]["Product"];
      product_barcodes?: components["schemas"]["ProductBarcode"];
      default_quantity_unit_purchase?: components["schemas"]["QuantityUnit"];
      quantity_unit_stock?: components["schemas"]["QuantityUnit"];
      /** Format: date */
      last_purchased?: string;
      /** Format: date-time */
      last_used?: string;
      stock_amount?: number;
      stock_amount_opened?: number;
      /** Format: date-time */
      next_due_date?: string;
      last_price?: number;
      avg_price?: number;
      oldest_price?: number;
      last_shopping_location_id?: number;
      location?: components["schemas"]["Location"];
      average_shelf_life_days?: number;
      spoil_rate_percent?: number;
      /** @description True when the product is a parent products of others */
      has_childs?: boolean;
    };
    ProductPriceHistory: {
      /** Format: date-time */
      date?: string;
      price?: number;
      shopping_location?: components["schemas"]["ShoppingLocation"];
    };
    ProductBarcode: {
      product_id?: number;
      barcode?: string;
      qu_id?: number;
      shopping_location_id?: number;
      amount?: number;
      last_price?: number;
      note?: string;
    };
    ExternalBarcodeLookupResponse: {
      name?: string;
      location_id?: number;
      qu_id_purchase?: number;
      qu_id_stock?: number;
      qu_factor_purchase_to_stock?: number;
      /** @description Can contain multiple barcodes separated by comma */
      barcode?: string;
      /** @description The id of the added product, only included when the producted was added to the database */
      id?: number;
    };
    /** @example [object Object] */
    ChoreDetailsResponse: {
      chore?: components["schemas"]["Chore"];
      /**
       * Format: date-time
       * @description When this chore was last tracked
       */
      last_tracked?: string;
      /** @description How often this chore was tracked so far */
      track_count?: number;
      last_done_by?: components["schemas"]["UserDto"];
      /** Format: date-time */
      next_estimated_execution_time?: string;
      next_execution_assigned_user?: components["schemas"]["UserDto"];
    };
    /** @example [object Object] */
    BatteryDetailsResponse: {
      chore?: components["schemas"]["Battery"];
      /**
       * Format: date-time
       * @description When this battery was last charged
       */
      last_charged?: string;
      /** @description How often this battery was charged so far */
      charge_cycles_count?: number;
      /** Format: date-time */
      next_estimated_charge_time?: string;
    };
    Session: {
      id?: number;
      session_key?: string;
      /** Format: date-time */
      expires?: string;
      /** Format: date-time */
      last_used?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    User: {
      id?: number;
      username?: string;
      first_name?: string;
      last_name?: string;
      password?: string;
      picture_file_name?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    /** @description A user object without the *password* and with an additional *display_name* property */
    UserDto: {
      id?: number;
      username?: string;
      first_name?: string;
      last_name?: string;
      display_name?: string;
      picture_file_name?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    ApiKey: {
      id?: number;
      api_key?: string;
      /** Format: date-time */
      expires?: string;
      /** Format: date-time */
      last_used?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    ShoppingListItem: {
      id: number;
      qu_id: number | string;
      shopping_list_id: number;
      product_id: number;
      note: string;
      /** @description The manual entered amount */
      amount: number;
      /** Format: date-time */
      row_created_timestamp: string;
      /** @description Key/value pairs of userfields */
      userfields?: { [key: string]: unknown };
    };
    Battery: {
      id?: number;
      name?: string;
      description?: string;
      used_in?: string;
      charge_interval_days?: number;
      /** Format: date-time */
      row_created_timestamp?: string;
      /** @description Key/value pairs of userfields */
      userfields?: { [key: string]: unknown };
    };
    BatteryChargeCycleEntry: {
      id?: number;
      battery_id?: number;
      /** Format: date-time */
      tracked_time?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    Chore: {
      id?: number;
      name?: string;
      description?: string;
      /** @enum {string} */
      period_type?: "manually" | "dynamic-regular" | "daily" | "weekly" | "monthly";
      period_config?: string;
      period_days?: number;
      track_date_only?: boolean;
      rollover?: boolean;
      /** @enum {string} */
      assignment_type?:
        | "no-assignment"
        | "who-least-did-first"
        | "random"
        | "in-alphabetical-order";
      assignment_config?: string;
      next_execution_assigned_to_user_id?: number;
      /** Format: date-time */
      row_created_timestamp?: string;
      /** @description Key/value pairs of userfields */
      userfields?: { [key: string]: unknown };
    };
    ChoreLogEntry: {
      id?: number;
      chore_id?: number;
      /** Format: date-time */
      tracked_time?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    StockLogEntry: {
      id?: number;
      product_id?: number;
      amount?: number;
      /** Format: date */
      best_before_date?: string;
      /** Format: date-time */
      purchased_date?: string;
      /** Format: date */
      used_date?: string;
      spoiled?: boolean;
      stock_id?: string;
      transaction_id?: string;
      transaction_type?: components["schemas"]["StockTransactionType"];
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    /** @example [object Object] */
    StockJournal: {
      correlation_id?: string;
      undone?: number;
      /** Format: date-time */
      undone_timestamp?: string;
      amount?: number;
      location_id?: number;
      location_name?: string;
      product_name?: string;
      qu_name?: string;
      qu_name_plural?: string;
      user_display_name?: string;
      spoiled?: boolean;
      transaction_type?: components["schemas"]["StockTransactionType"];
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    /** @example [object Object] */
    StockJournalSummary: {
      amount?: number;
      user_id?: number;
      product_name?: string;
      product_id?: number;
      qu_name?: string;
      qu_name_plural?: string;
      user_display_name?: string;
      transaction_type?: components["schemas"]["StockTransactionType"];
    };
    /** @example [object Object] */
    Error400: {
      error_message?: string;
    };
    /** @example [object Object] */
    Error500: {
      error_message?: string;
      error_details?: {
        stack_trace?: string;
        file?: string;
        line?: number;
      };
    };
    CurrentStockResponse: {
      product_id?: number;
      amount?: number;
      amount_aggregated?: number;
      amount_opened?: number;
      amount_opened_aggregated?: number;
      /**
       * Format: date
       * @description The next due date for this product
       */
      best_before_date?: string;
      /** @description Indicates wheter this product has sub-products or not / if the fields `amount_aggregated` and `amount_opened_aggregated` are filled */
      is_aggregated_amount?: boolean;
      product?: components["schemas"]["Product"];
    };
    CurrentChoreResponse: {
      chore_id?: number;
      chore_name?: string;
      /** Format: date-time */
      last_tracked_time?: string;
      track_date_only?: boolean;
      /**
       * Format: date-time
       * @description The next estimated execution time of this chore, 2999-12-31 23:59:59 when the given chore has a period_type of manually
       */
      next_estimated_execution_time?: string;
      next_execution_assigned_to_user_id?: number;
      next_execution_assigned_user?: components["schemas"]["UserDto"];
    };
    CurrentBatteryResponse: {
      battery_id?: number;
      /** Format: date-time */
      last_tracked_time?: string;
      /**
       * Format: date-time
       * @description The next estimated charge time of this battery, 2999-12-31 23:59:59 when the given battery has no charge_interval_days defined
       */
      next_estimated_charge_time?: string;
    };
    CurrentVolatilStockResponse: {
      due_products?: components["schemas"]["CurrentStockResponse"][];
      overdue_products?: components["schemas"]["CurrentStockResponse"][];
      expired_products?: components["schemas"]["CurrentStockResponse"][];
      missing_products?: {
        id?: number;
        name?: string;
        amount_missing?: number;
        is_partly_in_stock?: number;
      }[];
    };
    Task: {
      id?: number;
      name?: string;
      description?: string;
      /** Format: date-time */
      due_date?: string;
      done?: number;
      /** Format: date-time */
      done_timestamp?: string;
      category_id?: number;
      assigned_to_user_id?: number;
      /** Format: date-time */
      row_created_timestamp?: string;
      /** @description Key/value pairs of userfields */
      userfields?: { [key: string]: unknown };
    };
    TaskCategory: {
      id?: number;
      name?: string;
      description?: string;
      /** Format: date-time */
      row_created_timestamp?: string;
    };
    CurrentTaskResponse: {
      id?: number;
      name?: string;
      description?: string;
      /** Format: date-time */
      due_date?: string;
      done?: number;
      /** Format: date-time */
      done_timestamp?: string;
      category_id?: number;
      assigned_to_user_id?: number;
      /** Format: date-time */
      row_created_timestamp?: string;
      assigned_to_user?: components["schemas"]["UserDto"];
      category?: components["schemas"]["TaskCategory"];
    };
    DbChangedTimeResponse: {
      /** Format: date-time */
      changed_time?: string;
    };
    TimeResponse: {
      timezone?: string;
      /** Format: date-time */
      time_local?: string;
      /** Format: date-time */
      time_local_sqlite3?: string;
      /** Format: date-time */
      time_utc?: string;
      timestamp?: number;
      offset?: number;
    };
    UserSetting: {
      value?: string;
    };
    MissingLocalizationRequest: {
      text?: string;
    };
    /** @enum {string} */
    ExposedEntity:
      | "products"
      | "chores"
      | "product_barcodes"
      | "batteries"
      | "locations"
      | "quantity_units"
      | "quantity_unit_conversions"
      | "shopping_list"
      | "shopping_lists"
      | "shopping_locations"
      | "recipes"
      | "recipes_pos"
      | "recipes_nestings"
      | "tasks"
      | "task_categories"
      | "product_groups"
      | "equipment"
      | "api_keys"
      | "userfields"
      | "userentities"
      | "userobjects"
      | "meal_plan"
      | "stock_log"
      | "stock"
      | "stock_current_locations"
      | "chores_log"
      | "meal_plan_sections"
      | "products_last_purchased"
      | "products_average_price";
    /** @enum {string} */
    ExposedEntityNoListing: "api_keys";
    /** @enum {string} */
    ExposedEntityNoEdit:
      | "stock_log"
      | "api_keys"
      | "stock"
      | "stock_current_locations"
      | "chores_log"
      | "products_last_purchased"
      | "products_average_price";
    /** @enum {string} */
    ExposedEntityNoDelete:
      | "stock_log"
      | "stock"
      | "stock_current_locations"
      | "chores_log"
      | "products_last_purchased"
      | "products_average_price";
    /** @enum {string} */
    ExposedEntityEditRequiresAdmin: "api_keys";
    /** @enum {string} */
    ExposedEntity_NotIncludingNotListable:
      | "products"
      | "chores"
      | "product_barcodes"
      | "batteries"
      | "locations"
      | "quantity_units"
      | "quantity_unit_conversions"
      | "shopping_list"
      | "shopping_lists"
      | "shopping_locations"
      | "recipes"
      | "recipes_pos"
      | "recipes_nestings"
      | "tasks"
      | "task_categories"
      | "product_groups"
      | "equipment"
      | "userfields"
      | "userentities"
      | "userobjects"
      | "meal_plan"
      | "stock_log"
      | "stock"
      | "stock_current_locations"
      | "chores_log"
      | "meal_plan_sections"
      | "products_last_purchased"
      | "products_average_price";
    /** @enum {string} */
    ExposedEntity_NotIncludingNotEditable:
      | "products"
      | "chores"
      | "product_barcodes"
      | "batteries"
      | "locations"
      | "quantity_units"
      | "quantity_unit_conversions"
      | "shopping_list"
      | "shopping_lists"
      | "shopping_locations"
      | "recipes"
      | "recipes_pos"
      | "recipes_nestings"
      | "tasks"
      | "task_categories"
      | "product_groups"
      | "equipment"
      | "api_keys"
      | "userfields"
      | "userentities"
      | "userobjects"
      | "meal_plan"
      | "meal_plan_sections";
    /** @enum {string} */
    ExposedEntity_NotIncludingNotDeletable:
      | "api_keys"
      | "products"
      | "chores"
      | "product_barcodes"
      | "batteries"
      | "locations"
      | "quantity_units"
      | "quantity_unit_conversions"
      | "shopping_list"
      | "shopping_lists"
      | "shopping_locations"
      | "recipes"
      | "recipes_pos"
      | "recipes_nestings"
      | "tasks"
      | "task_categories"
      | "product_groups"
      | "equipment"
      | "api_keys"
      | "userfields"
      | "userentities"
      | "userobjects"
      | "meal_plan"
      | "meal_plan_sections";
    /** @enum {string} */
    StockTransactionType: "purchase" | "consume" | "inventory-correction" | "product-opened";
    /** @enum {string} */
    FileGroups:
      | "equipmentmanuals"
      | "recipepictures"
      | "productpictures"
      | "userfiles"
      | "userpictures";
    /** @enum {string} */
    StringEnumTemplate: "";
  };
  parameters: {
    /** @description A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted) */
    order: string;
    /** @description The maximum number of objects to return */
    limit: number;
    /** @description The number of objects to skip */
    offset: number;
    /** @description Offset of timestamp in seconds. Can be positive or negative. */
    offsettime: number;
    /** @description An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for */
    query: string[];
  };
}
