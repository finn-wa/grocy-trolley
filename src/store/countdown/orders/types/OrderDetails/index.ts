// Code generated by jtd-codegen for TypeScript v0.2.1

import { Unknown } from "@gt/jtd/infer";

export interface OrderDetailsBreadcrumb {
  aisle?: any;
  department?: any;
  dynamicGroup?: any;
  productGroup?: any;
  shelf?: any;
}

export interface OrderDetailsContextAdvancedSettingsResponse {
  allowBannerRotation: boolean;
  itemLevelSubstitution: boolean;
  showHaveYouForgotten: boolean;
}

export interface OrderDetailsContextBasketTotals {
  bagFees: string;
  deliveryFees: string;
  eligibilityForDeliverySubscriptionDiscount: string;
  savings: string;
  subtotal: string;
  totalIncludingDeliveryFees: string;
  totalItems: number;
}

export interface OrderDetailsContextFulfilmentExpressFulfilment {
  isExpressSlot: boolean;
  isLastExpressHourWindow: boolean;
}

export interface OrderDetailsContextFulfilment {
  address: string;
  areaId: number;
  expressFulfilment: OrderDetailsContextFulfilmentExpressFulfilment;
  fulfilmentStoreId: number;
  isAddressInDeliveryZone: boolean;
  isDefaultDeliveryAddress: boolean;
  isSlotToday: boolean;
  method: string;
  perishableCode: string;
  cutOffTime?: any;
  endTime?: any;
  locker?: any;
  selectedDate?: any;
  selectedDateWithTZInfo?: any;
  startTime?: any;
}

export interface OrderDetailsContextShopperOneCardBalance {
  isOneCardInError: boolean;
  oneCardCurrency: string;
  oneCardNumber: string;
  onecardPointsBalance: number;
  redeemableRewardVouchers: number;
  continuitySpend?: any;
}

export interface OrderDetailsContextShopper {
  firstName: string;
  hasActiveDeliverySubscription: boolean;
  hasOnecard: boolean;
  isChangingOrder: boolean;
  isLoggedIn: boolean;
  isPriorityShopper: boolean;
  isShopper: boolean;
  isSupplyLimitOverrideShopper: boolean;
  oneCardBalance: OrderDetailsContextShopperOneCardBalance;
  orderCount: string;
  sessionGroups: number[];
  shopperIdHash: string;
  shopperScvId: string;
  changingOrderId?: any;
}

export interface OrderDetailsContext {
  advancedSettingsResponse: OrderDetailsContextAdvancedSettingsResponse;
  basketTotals: OrderDetailsContextBasketTotals;
  enabledFeatures: string[];
  fulfilment: OrderDetailsContextFulfilment;
  shopper: OrderDetailsContextShopper;
  shoppingListItems: string[];
}

export interface OrderDetailsPartialFailures {
  breadcrumbGenerationFailed?: any;
  maxSupplyLimitFetchFailed?: any;
  productGroupFetchFailed?: any;
  productTagFetchFailed?: any;
  purchaseUnitFetchFailed?: any;
  shopperNotesFetchFailed?: any;
  targetOfferFetchFailed?: any;
  trolleyQuantityUpdateFailed?: any;
}

export interface OrderDetailsProductsItemImages {
  big: string;
  small: string;
}

export interface OrderDetailsProductsItemPrice {
  averagePricePerSingleUnit: number | null;
  canShowOriginalPrice: boolean;
  hasBonusPoints: boolean;
  isClubPrice: boolean;
  isNew: boolean;
  isSpecial: boolean;
  isTargetedOffer: boolean;
  originalPrice: number;
  salePrice: number;
  savePrice: number;
  discount?: any;
  purchasingUnitPrice?: any;
  total?: any;
}

export interface OrderDetailsProductsItemProductTagMultiBuy {
  link: string;
  quantity: number;
  value: number;
}

export interface OrderDetailsProductsItemProductTag {
  multiBuy: OrderDetailsProductsItemProductTagMultiBuy | null;
  tagType: string;
  additionalTag?: any;
  bonusPoints?: any;
  targetedOffer?: any;
}

export interface OrderDetailsProductsItemQuantity {
  increment: number;
  max: number;
  min: number;
  value: number | null;
  purchasingQuantityString?: any;
  quantityInOrder?: any;
}

export interface OrderDetailsProductsItemSize {
  cupMeasure: string | null;
  cupPrice: number;
  packageType: string | null;
  volumeSize: string | null;
}

export interface OrderDetailsProductsItem {
  averageWeightPerUnit: number | null;
  barcode: string;
  brand: string;
  hasShopperNotes: boolean;
  images: OrderDetailsProductsItemImages;
  name: string;
  price: OrderDetailsProductsItemPrice;
  productTag: OrderDetailsProductsItemProductTag | null;
  quantity: OrderDetailsProductsItemQuantity;
  selectedPurchasingUnit: string;
  size: OrderDetailsProductsItemSize;
  sku: string;
  slug: string;
  subsAllowed: boolean;
  supportsBothEachAndKgPricing: boolean;
  type: string;
  unit: string;
  variety: string | null;
  adId?: any;
  eachUnitQuantity?: any;
  priceUnitLabel?: any;
}

export interface OrderDetailsProducts {
  items: OrderDetailsProductsItem[];
  totalItems: number;
}

export interface OrderDetailsSortOption {
  selected: boolean;
  text: string;
  value: string;
}

export interface OrderDetails {
  breadcrumb: OrderDetailsBreadcrumb;
  context: OrderDetailsContext;
  currentPageSize: number;
  currentSortOption: string;
  dasFacets: Unknown[];
  facets: Unknown[];
  isSuccessful: boolean;
  partialFailures: OrderDetailsPartialFailures;
  products: OrderDetailsProducts;
  rootUrl: string;
  sortOptions: OrderDetailsSortOption[];
  action?: any;
  messages?: any;
  targetedOfferDetails?: any;
}
