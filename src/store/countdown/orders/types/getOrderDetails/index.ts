// Code generated by jtd-codegen for TypeScript v0.2.1

export interface OrderDetailsBreadcrumb {
  aisle: any;
  department: any;
  dynamicGroup: any;
  productGroup: any;
  shelf: any;
}

export interface OrderDetailsContextAdvancedSettingsResponse {
  allowBannerRotation: boolean;
  itemLevelSubstitution: boolean;
  showHaveYouForgotten: boolean;
}

export interface OrderDetailsContextBasketTotals {
  bagFees: string;
  deliveryFees: string;
  eligibilityForDeliverySubscriptionDiscount: string;
  savings: any;
  subtotal: string;
  totalIncludingDeliveryFees: string;
  totalItems: number;
}

export interface OrderDetailsContextFulfilmentExpressFulfilment {
  isExpressSlot: boolean;
  isLastExpressHourWindow: boolean;
}

export interface OrderDetailsContextFulfilment {
  address: string;
  areaId: number;
  cutOffTime: any;
  endTime: any;
  expressFulfilment: OrderDetailsContextFulfilmentExpressFulfilment;
  fulfilmentStoreId: number;
  isAddressInDeliveryZone: boolean;
  isDefaultDeliveryAddress: boolean;
  isSlotToday: boolean;
  locker: any;
  method: string;
  perishableCode: string;
  selectedDate: any;
  selectedDateWithTZInfo: any;
  startTime: any;
}

export interface OrderDetailsContextShopperOneCardBalance {
  continuitySpend: any;
  isOneCardInError: boolean;
  oneCardCurrency: string;
  oneCardNumber: string;
  onecardPointsBalance: number;
  redeemableRewardVouchers: number;
}

export interface OrderDetailsContextShopper {
  changingOrderId: any;
  firstName: string;
  hasActiveDeliverySubscription: boolean;
  hasOnecard: boolean;
  isChangingOrder: boolean;
  isLoggedIn: boolean;
  isPriorityShopper: boolean;
  isShopper: boolean;
  isSupplyLimitOverrideShopper: boolean;
  oneCardBalance: OrderDetailsContextShopperOneCardBalance;
  orderCount: string;
  sessionGroups: number[];
  shopperIdHash: string;
  shopperScvId: string;
}

export interface OrderDetailsContext {
  advancedSettingsResponse: OrderDetailsContextAdvancedSettingsResponse;
  basketTotals: OrderDetailsContextBasketTotals;
  enabledFeatures: string[];
  fulfilment: OrderDetailsContextFulfilment;
  shopper: OrderDetailsContextShopper;
  shoppingListItems: string[];
}

export interface OrderDetailsPartialFailures {
  breadcrumbGenerationFailed: any;
  maxSupplyLimitFetchFailed: any;
  productGroupFetchFailed: any;
  productTagFetchFailed: any;
  purchaseUnitFetchFailed: any;
  shopperNotesFetchFailed: any;
  targetOfferFetchFailed: any;
  trolleyQuantityUpdateFailed: any;
}

export interface OrderDetailsProductsItemImages {
  big: string;
  small: string;
}

export interface OrderDetailsProductsItemPrice {
  averagePricePerSingleUnit: (number | null);
  canShowOriginalPrice: boolean;
  discount: any;
  hasBonusPoints: boolean;
  isClubPrice: boolean;
  isNew: boolean;
  isSpecial: boolean;
  isTargetedOffer: boolean;
  originalPrice: number;
  purchasingUnitPrice: any;
  salePrice: number;
  savePrice: number;
  total: any;
}

export interface OrderDetailsProductsItemProductTagAdditionalTag {
  altText: any;
  imagePath: string;
  link: any;
  linkTarget: string;
  name: string;
}

export interface OrderDetailsProductsItemProductTag {
  additionalTag: (OrderDetailsProductsItemProductTagAdditionalTag | null);
  bonusPoints: any;
  multiBuy: any;
  tagType: string;
  targetedOffer: any;
}

export interface OrderDetailsProductsItemQuantity {
  increment: number;
  max: number;
  min: number;
  purchasingQuantityString: any;
  quantityInOrder: any;
  value: any;
}

export interface OrderDetailsProductsItemSize {
  cupMeasure: (string | null);
  cupPrice: number;
  packageType: (string | null);
  volumeSize: (string | null);
}

export interface OrderDetailsProductsItem {
  adId: any;
  averageWeightPerUnit: (number | null);
  barcode: string;
  brand: string;
  eachUnitQuantity: any;
  hasShopperNotes: boolean;
  images: OrderDetailsProductsItemImages;
  name: string;
  price: OrderDetailsProductsItemPrice;
  priceUnitLabel: any;
  productTag: (OrderDetailsProductsItemProductTag | null);
  quantity: OrderDetailsProductsItemQuantity;
  selectedPurchasingUnit: string;
  size: OrderDetailsProductsItemSize;
  sku: string;
  slug: string;
  subsAllowed: boolean;
  supportsBothEachAndKgPricing: boolean;
  type: string;
  unit: string;
  variety: (string | null);
}

export interface OrderDetailsProducts {
  items: OrderDetailsProductsItem[];
  totalItems: number;
}

export interface OrderDetailsSortOption {
  selected: boolean;
  text: string;
  value: string;
}

export interface OrderDetails {
  action: any;
  breadcrumb: OrderDetailsBreadcrumb;
  context: OrderDetailsContext;
  currentPageSize: number;
  currentSortOption: string;
  dasFacets: any[];
  facets: any[];
  isSuccessful: boolean;
  messages: any;
  partialFailures: OrderDetailsPartialFailures;
  products: OrderDetailsProducts;
  rootUrl: string;
  sortOptions: OrderDetailsSortOption[];
  targetedOfferDetails: any;
}
